

/// Represents different kinds of input events the engine can handle.
/// These events can be generated by various input devices such as keyboards, mice, or game controllers.
#[derive(Debug, Clone, PartialEq)]
pub enum InputEvent {
    /// A keyboard key was pressed.
    KeyPressed {
        key_code: String,
    },
    /// The mouse cursor was moved.
    MouseMoved {
        x: f64,
        y: f64,
    },
}


/// Trait defining the responsibilities of an input provider.
pub trait InputProvider {

    /// Polls for and returns any new input events that occurred since the last call.
    /// ## Arguments
    /// * `&mut self` - A mutable reference to the InputProvider instance.
    /// ## Returns
    /// A vector of InputEvent instances representing the events that occurred.
    fn poll_events(&mut self) -> Vec<InputEvent>;
    
}
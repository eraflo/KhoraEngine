name: Rust CI

on:
  push:
    branches: [ main ] # Run on pushes to main
  pull_request:
    branches: [ main ] # Run on PRs targeting main

env:
  CARGO_TERM_COLOR: always
  RUSTFLAGS: "-Dwarnings" # Treat all Rust warnings as errors in CI

jobs:
  lint_and_format:
    name: Format & Lint Checks
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust toolchain (with rustfmt and clippy)
        uses: dtolnay/rust-toolchain@stable
        with:
          components: rustfmt, clippy # Ensure rustfmt and clippy are installed

      - name: Cache Cargo dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ runner.os }}-cargo-lint-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-lint-

      - name: Check formatting
        # Check that all code in the workspace is correctly formatted
        run: cargo fmt --all -- --check

      - name: Run Clippy (Linter)
        # Run Clippy on the entire workspace, for all targets, with all features.
        # `-D warnings` turns Clippy warnings into errors.
        run: cargo clippy --workspace --all-targets --all-features -- -D warnings

  build_and_test_ubuntu:
    name: Build & Test (Ubuntu)
    runs-on: ubuntu-latest
    needs: lint_and_format # This job will only start if lint_and_format succeeds
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable

      - name: Cache Cargo dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ runner.os }}-cargo-build-ubuntu-${{ hashFiles('**/Cargo.lock') }} # OS-specific key part
          restore-keys: |
            ${{ runner.os }}-cargo-build-ubuntu-

      - name: Build
        # Build all targets in the workspace, with all features
        run: cargo build --verbose --workspace --all-targets --all-features

      - name: Run tests
        # Run tests for all targets in the workspace, with all features
        run: cargo test --verbose --workspace --all-targets --all-features

  build_and_test_windows:
    name: Build & Test (Windows)
    runs-on: windows-latest
    needs: lint_and_format # This job will only start if lint_and_format succeeds
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable

      - name: Cache Cargo dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ runner.os }}-cargo-build-windows-${{ hashFiles('**/Cargo.lock') }} # OS-specific key part
          restore-keys: |
            ${{ runner.os }}-cargo-build-windows-

      - name: Build
        run: cargo build --verbose --workspace --all-targets --all-features

      - name: Run tests
        run: cargo test --verbose --workspace --all-targets --all-features

  build_and_test_macos:
    name: Build & Test (macOS)
    runs-on: macos-latest
    needs: lint_and_format # This job will only start if lint_and_format succeeds
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable

      - name: Cache Cargo dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ runner.os }}-cargo-build-macos-${{ hashFiles('**/Cargo.lock') }} # OS-specific key part
          restore-keys: |
            ${{ runner.os }}-cargo-build-macos-

      - name: Build
        run: cargo build --verbose --workspace --all-targets --all-features

      - name: Run tests
        run: cargo test --verbose --workspace --all-targets --all-features